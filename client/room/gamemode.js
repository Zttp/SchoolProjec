import { DisplayValueHeader, Color, Vector3 } from 'pixel_combats/basic';
import { Game, Players, Inventory, LeaderBoard, BuildBlocksSet, Teams, Damage, BreackGraph, Ui, Properties, GameMode, Spawns, Timers, TeamsBalancer, AreaService, AreaPlayerTriggerService, AreaViewService, Chat } from 'pixel_combats/room';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞
const WAITING_TIME = 10;      // –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
const INTRODUCTION_TIME = 30;  // –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
const CLUE_TIME = 300;        // –í—Ä–µ–º—è —Å–±–æ—Ä–∞ —É–ª–∏–∫
const RIDDLE_TIME = 180;      // –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–≥–∞–¥–æ–∫
const FINAL_TIME = 120;       // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ
const EPILOGUE_TIME = 60;     // –†–∞–∑–≤—è–∑–∫–∞

// –¶–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥ (–∫–ª–∞—Å—Å–æ–≤)
const class5AColor = new Color(0, 0.5, 1, 0);    // –ì–æ–ª—É–±–æ–π - 5–ê
const class6BColor = new Color(1, 0.8, 0, 0);     // –û—Ä–∞–Ω–∂–µ–≤—ã–π - 6–ë
const class7VColor = new Color(0.5, 0, 1, 0);     // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - 7–í

// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã
const Inv = Inventory.GetContext();
const Sp = Spawns.GetContext();
const Dmg = Damage.GetContext();
const Props = Properties.GetContext();

// –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const Characters = {
    GHOST: "–ü—Ä–∏–∑—Ä–∞–∫",
    DETECTIVE: "–î–µ—Ç–µ–∫—Ç–∏–≤",
    LIBRARIAN: "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å",
    JANITOR: "–£–±–æ—Ä—â–∏–∫",
    OLD_TEACHER: "–°—Ç–∞—Ä—ã–π —É—á–∏—Ç–µ–ª—å",
    STUDENT: "–£—á–µ–Ω–∏–∫",
    TEACHER: "–£—á–∏—Ç–µ–ª—å",
    DIRECTOR: "–î–∏—Ä–µ–∫—Ç–æ—Ä"
};

const GameStates = {
    WAITING: "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤",
    INTRODUCTION: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é",
    GHOST_APPEARANCE: "–ü–æ—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑—Ä–∞–∫–∞",
    CLUE_COLLECTION: "–°–±–æ—Ä —É–ª–∏–∫",
    PUZZLE_SOLVING: "–†–µ—à–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫",
    FINAL_CONFRONTATION: "–§–∏–Ω–∞–ª",
    EPILOGUE: "–†–∞–∑–≤—è–∑–∫–∞"
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const schoolMode = {
    state: GameStates.WAITING,
    roles: {},                  // {playerId: role}
    playerData: {},             // {playerId: {energy, hunger, scores, inventory, class}}
    punishments: {},            // {playerId: punishmentTimer}
    quests: {
        currentQuest: 0,
        allQuests: [
            {
                title: "–ü—Ä–æ–ø–∞–≤—à–∏–π —É—á–µ–±–Ω–∏–∫",
                description: "–ù–∞–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–ø–∞–≤—à–∏–π —É—á–µ–±–Ω–∏–∫ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ",
                target: "library",
                completed: false,
                reward: 100
            },
            {
                title: "–ó–∞–≥–∞–¥–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —É—á–∏—Ç–µ–ª—è",
                description: "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å –º–∏—Å—Ç–µ—Ä–æ–º –ë—Ä–∞—É–Ω–æ–º –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ",
                target: "library",
                completed: false,
                reward: 150
            },
            {
                title: "–°–ª–µ–¥ –≤ –ø–æ–¥–≤–∞–ª–µ",
                description: "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥–≤–∞–ª —à–∫–æ–ª—ã",
                target: "detention",
                completed: false,
                reward: 200
            }
        ],
        clues: [],
        riddles: [
            {q: "–Ø –Ω–µ –∂–∏–≤–æ–π, –Ω–æ —è –º–æ–≥—É —É–º–µ—Ä–µ—Ç—å. –ß—Ç–æ —è?", a: "–æ–≥–æ–Ω—å"},
            {q: "–ß–µ–º –±–æ–ª—å—à–µ –±–µ—Ä–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤–ª—è–µ—à—å. –ß—Ç–æ —è?", a: "—à–∞–≥–∏"},
            {q: "–í–∏–¥–µ–Ω, –Ω–æ –Ω–µ —Å–ª—ã—à–µ–Ω. –ì–æ–≤–æ—Ä–∏—Ç, –Ω–æ –Ω–µ –¥—ã—à–∏—Ç. –ß—Ç–æ —ç—Ç–æ?", a: "—ç—Ö–æ"}
        ]
    },
    schoolZones: {
        classroom: {center: new Vector3(0, 0, 0), radius: 15},
        gym: {center: new Vector3(30, 0, 0), radius: 20},
        cafeteria: {center: new Vector3(0, 0, 30), radius: 15},
        library: {center: new Vector3(-30, 0, 0), radius: 15},
        yard: {center: new Vector3(0, 0, -30), radius: 25},
        detention: {center: new Vector3(0, -10, 0), radius: 5},
        auditorium: {center: new Vector3(-30, 0, 30), radius: 20},
        playground: {center: new Vector3(30, 0, -30), radius: 25}
    },
    ghost: null,
    adminId: "D411BD94CAE31F89" // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
const mainTimer = Timers.GetContext().Get("Main");
const serverTimer = Timers.GetContext().Get("Server");
const scheduleTimer = Timers.GetContext().Get("Schedule");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
function initServerProperties() {
    Props.Get('Time_Hours').Value = 8;
    Props.Get('Time_Minutes').Value = 0;
    Props.Get('Time_Seconds').Value = 0;
    Props.Get('School_Score').Value = 0;
    Props.Get('Game_State').Value = schoolMode.state;
    Props.Get('Current_Clue').Value = "";
    Props.Get('Current_Riddle').Value = "";
}

function initServerTimer() {
    serverTimer.OnTimer.Add(function(t) {
        Props.Get('Time_Seconds').Value++;
        
        if (Props.Get('Time_Seconds').Value >= 60) {
            Props.Get('Time_Seconds').Value = 0;
            Props.Get('Time_Minutes').Value++;
        }
        
        if (Props.Get('Time_Minutes').Value >= 60) {
            Props.Get('Time_Minutes').Value = 0;
            Props.Get('Time_Hours').Value++;
        }
        
        Props.Get('Time_FixedString').Value = 
            `${Props.Get('Time_Hours').Value.toString().padStart(2, '0')}:` +
            `${Props.Get('Time_Minutes').Value.toString().padStart(2, '0')}`;
        
        serverTimer.RestartLoop(1);
    });
    serverTimer.RestartLoop(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
function setupClasses() {
    Teams.Add('5–ê', '5–ê –∫–ª–∞—Å—Å', class5AColor);
    Teams.Add('6–ë', '6–ë –∫–ª–∞—Å—Å', class6BColor);
    Teams.Add('7–í', '7–í –∫–ª–∞—Å—Å', class7VColor);

    const Class5A = Teams.Get('5–ê');
    const Class6B = Teams.Get('6–ë');
    const Class7V = Teams.Get('7–í');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–≤–Ω–æ–≤
    Class5A.Spawns.SpawnPointsGroups.Add(1);
    Class6B.Spawns.SpawnPointsGroups.Add(2);
    Class7V.Spawns.SpawnPointsGroups.Add(3);

    return { Class5A, Class6B, Class7V };
}

const { Class5A, Class6B, Class7V } = setupClasses();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–æ–≤-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
function setupBots() {
    const bots = [
        { name: "–ú–∏—Å—Ç–µ—Ä –ë—Ä–∞—É–Ω", role: Characters.OLD_TEACHER, spawn: "library", skin: 3 },
        { name: "–ú–∏—Å—Å–∏—Å –°–º–∏—Ç", role: Characters.LIBRARIAN, spawn: "library", skin: 4 },
        { name: "–î–∂–æ–Ω-—É–±–æ—Ä—â–∏–∫", role: Characters.JANITOR, spawn: "yard", skin: 5 },
        { name: "–î–µ—Ç–µ–∫—Ç–∏–≤ –ö–∞—Ä—Ç–µ—Ä", role: Characters.DETECTIVE, spawn: "auditorium", skin: 6 }
    ];

    bots.forEach(bot => {
        const npc = Players.CreateBot(bot.name);
        schoolMode.roles[npc.id] = bot.role;
        npc.Properties.Get('Role').Value = bot.role;
        npc.contextedProperties.SkinType.Value = bot.skin;
        npc.SetPosition(schoolMode.schoolZones[bot.spawn].center);
        npc.AI.Enabled = true;
        npc.AI.Wander = true;
        npc.AI.WanderRadius = 10;
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑—Ä–∞–∫–∞
function setupGhost() {
    schoolMode.ghost = Players.CreateBot("–¢–∞–π–Ω—ã–π_–ü—Ä–∏–∑—Ä–∞–∫");
    schoolMode.roles[schoolMode.ghost.id] = Characters.GHOST;
    schoolMode.ghost.Properties.Get('Role').Value = Characters.GHOST;
    schoolMode.ghost.contextedProperties.SkinType.Value = 7; // –û—Å–æ–±—ã–π —Å–∫–∏–Ω –ø—Ä–∏–∑—Ä–∞–∫–∞
    schoolMode.ghost.AI.Enabled = true;
    
    const ghostPoints = [
        schoolMode.schoolZones.library.center,
        schoolMode.schoolZones.detention.center,
        schoolMode.schoolZones.auditorium.center
    ];
    
    let currentPoint = 0;
    const ghostTimer = Timers.GetContext().Get("GhostMove");
    ghostTimer.OnTimer.Add(function() {
        schoolMode.ghost.SetPosition(ghostPoints[currentPoint]);
        currentPoint = (currentPoint + 1) % ghostPoints.length;
        
        if (Math.random() < 0.2) {
            const clue = "–ü—Ä–∏–∑—Ä–∞–∫ –±—ã–ª –∑–¥–µ—Å—å " + new Date().toLocaleTimeString();
            schoolMode.quests.clues.push(clue);
            room.Ui.Hint.Value = "üíÄ –ü—Ä–∏–∑—Ä–∞–∫ –æ—Å—Ç–∞–≤–∏–ª —Å–ª–µ–¥! –ò—â–∏—Ç–µ —É–ª–∏–∫–∏!";
        }
        
        ghostTimer.RestartLoop(30);
    });
    ghostTimer.RestartLoop(30);
}

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
function assignRoles() {
    const players = Players.All.filter(p => !p.IsBot);
    
    // –î–∏—Ä–µ–∫—Ç–æ—Ä (1 —á–µ–ª–æ–≤–µ–∫)
    if (players.length > 0) {
        const director = players[0];
        schoolMode.roles[director.id] = Characters.DIRECTOR;
        director.Properties.Get('Role').Value = Characters.DIRECTOR;
        director.contextedProperties.SkinType.Value = 4;
        initPlayerData(director);
    }
    
    // –£—á–∏—Ç–µ–ª—è (10% –∏–≥—Ä–æ–∫–æ–≤)
    const teacherCount = Math.max(1, Math.floor(players.length * 0.1));
    for (let i = 0; i < teacherCount; i++) {
        if (players.length > i+1) {
            const teacher = players[i+1];
            schoolMode.roles[teacher.id] = Characters.TEACHER;
            teacher.Properties.Get('Role').Value = Characters.TEACHER;
            teacher.contextedProperties.SkinType.Value = 3;
            initPlayerData(teacher);
        }
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ - —É—á–µ–Ω–∏–∫–∏
    players.forEach(player => {
        if (!schoolMode.roles[player.id]) {
            schoolMode.roles[player.id] = Characters.STUDENT;
            player.Properties.Get('Role').Value = Characters.STUDENT;
            player.contextedProperties.SkinType.Value = Math.floor(Math.random() * 3);
            initPlayerData(player);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
function initPlayerData(player) {
    if (!schoolMode.playerData[player.id]) {
        schoolMode.playerData[player.id] = {
            energy: 100,
            hunger: 0,
            scores: player.Properties.Scores.Value || 0,
            inventory: [],
            class: player.Team ? player.Team.Name : null
        };
    }
    
    player.Properties.Scores.Value = schoolMode.playerData[player.id].scores;
    player.Properties.Get('Role').Value = schoolMode.roles[player.id] || Characters.STUDENT;
    
    if (schoolMode.punishments[player.id]) {
        punishPlayer(player, "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è", schoolMode.punishments[player.id]);
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
function setGameState(newState) {
    schoolMode.state = newState;
    Props.Get('Game_State').Value = newState;
    
    switch(newState) {
        case GameStates.WAITING:
            Ui.GetContext().Hint.Value = "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...";
            Sp.Enable = true;
            mainTimer.Restart(WAITING_TIME);
            break;
            
        case GameStates.INTRODUCTION:
            Ui.GetContext().Hint.Value = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—É! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...";
            Sp.Enable = true;
            player.Spawns.Spawn()
            mainTimer.Restart(INTRODUCTION_TIME);
            break;
            
        case GameStates.GHOST_APPEARANCE:
            Ui.GetContext().Hint.Value = "üíÄ –í —à–∫–æ–ª–µ –ø–æ—è–≤–∏–ª—Å—è –ø—Ä–∏–∑—Ä–∞–∫! –û–Ω –∫—Ä–∞–¥–µ—Ç —É—á–µ–±–Ω–∏–∫–∏!";
            setupGhost();
            mainTimer.Restart(60);
            break;
            
        case GameStates.CLUE_COLLECTION:
            Ui.GetContext().Hint.Value = "–°–æ–±–∏—Ä–∞–π—Ç–µ —É–ª–∏–∫–∏ –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ (/talk)";
            schoolMode.quests.currentQuest = 0;
            announceNewQuest();
            mainTimer.Restart(CLUE_TIME);
            break;
            
        case GameStates.PUZZLE_SOLVING:
            Ui.GetContext().Hint.Value = "–†–µ—à–∞–π—Ç–µ –∑–∞–≥–∞–¥–∫–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /answer —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å";
            askGhostRiddle();
            mainTimer.Restart(RIDDLE_TIME);
            break;
            
        case GameStates.FINAL_CONFRONTATION:
            Ui.GetContext().Hint.Value = "–ü—Ä–∏–∑—Ä–∞–∫ –≤ –ø–æ–¥–≤–∞–ª–µ! –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ!";
            teleportGhostToDetention();
            mainTimer.Restart(FINAL_TIME);
            break;
            
        case GameStates.EPILOGUE:
            Ui.GetContext().Hint.Value = "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∞! –ü—Ä–∏–∑—Ä–∞–∫ –æ–±—Ä–µ–ª –ø–æ–∫–æ–π...";
            endStory();
            mainTimer.Restart(EPILOGUE_TIME);
            break;
    }
}

// –ê–Ω–æ–Ω—Å –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞
function announceNewQuest() {
    const quest = schoolMode.quests.allQuests[schoolMode.quests.currentQuest];
    if (quest) {
        room.Ui.Hint.Value = `üìå –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: ${quest.title}\n${quest.description}`;
    }
}

// –ó–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É –ø—Ä–∏–∑—Ä–∞–∫–∞
function askGhostRiddle() {
    if (schoolMode.quests.riddles.length > 0) {
        const randomRiddle = schoolMode.quests.riddles[Math.floor(Math.random() * schoolMode.quests.riddles.length)];
        Props.Get('Current_Riddle').Value = randomRiddle.q;
        room.Ui.Hint.Value = `üíÄ –ó–∞–≥–∞–¥–∫–∞ –ø—Ä–∏–∑—Ä–∞–∫–∞: ${randomRiddle.q}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /answer [–æ—Ç–≤–µ—Ç]`;
        schoolMode.quests.currentAnswer = randomRiddle.a;
    }
}

// –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –ø—Ä–∏–∑—Ä–∞–∫–∞ –≤ –ø–æ–¥–≤–∞–ª –¥–ª—è —Ñ–∏–Ω–∞–ª–∞
function teleportGhostToDetention() {
    if (schoolMode.ghost) {
        schoolMode.ghost.SetPosition(schoolMode.schoolZones.detention.center);
        schoolMode.ghost.AI.Wander = false;
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function endStory() {
    // –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å—ã—â–∏–∫–æ–≤
    let bestDetective = null;
    let maxClues = 0;
    
    Players.All.forEach(player => {
        if (!player.IsBot && schoolMode.playerData[player.id]?.inventory?.length > maxClues) {
            maxClues = schoolMode.playerData[player.id].inventory.length;
            bestDetective = player;
        }
    });
    
    if (bestDetective) {
        schoolMode.playerData[bestDetective.id].scores += 500;
        bestDetective.Properties.Scores.Value = schoolMode.playerData[bestDetective.id].scores;
        room.Ui.Hint.Value = `üèÜ –õ—É—á—à–∏–π —Å—ã—â–∏–∫: ${bestDetective.NickName} (–Ω–∞—à–µ–ª ${maxClues} —É–ª–∏–∫) +500 –æ—á–∫–æ–≤!`;
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–∑—Ä–∞–∫–∞
    if (schoolMode.ghost) {
        Players.Remove(schoolMode.ghost);
        schoolMode.ghost = null;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∑–æ–Ω–µ
function isPlayerInZone(player, zoneName) {
    const zone = schoolMode.schoolZones[zoneName];
    if (!zone) return false;
    
    const distance = player.Position.sub(zone.center).length;
    return distance <= zone.radius;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–≥–∞–¥–∫—É
function checkAnswer(player, answer) {
    if (!schoolMode.quests.currentAnswer) return false;
    
    const normalizedAnswer = answer.trim().toLowerCase();
    if (normalizedAnswer === schoolMode.quests.currentAnswer) {
        schoolMode.playerData[player.id].scores += 200;
        player.Properties.Scores.Value = schoolMode.playerData[player.id].scores;
        player.Ui.Hint.Value = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∏–∑—Ä–∞–∫ –æ—Å–ª–∞–±–ª–µ–Ω! +200 –æ—á–∫–æ–≤";
        schoolMode.quests.currentAnswer = null;
        Props.Get('Current_Riddle').Value = "";
        return true;
    }
    
    player.Ui.Hint.Value = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ";
    return false;
}

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π
function punishPlayer(player, reason, duration = 60) {
    player.SetPositionAndRotation(
        schoolMode.schoolZones.detention.center,
        player.Rotation
    );
    
    schoolMode.punishments[player.id] = duration;
    player.Ui.Hint.Value = `‚õî –í—ã –Ω–∞–∫–∞–∑–∞–Ω—ã –∑–∞ ${reason}! –û—Å—Ç–∞–ª–æ—Å—å: ${duration} —Å–µ–∫`;
}

// –°–∏—Å—Ç–µ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
function updatePlayerStats() {
    Players.All.forEach(player => {
        if (player.IsBot) return;
        
        const playerData = schoolMode.playerData[player.id];
        if (!playerData) return;
        
        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
        playerData.energy = Math.max(0, playerData.energy - 0.2);
        
        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥–æ–ª–æ–¥–∞
        playerData.hunger = Math.min(100, playerData.hunger + 0.1);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        player.Ui.Energy.Value = `‚ö° ${Math.round(playerData.energy)}%`;
        player.Ui.Hunger.Value = `üçé ${Math.round(playerData.hunger)}%`;
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
        if (playerData.energy < 20) {
            player.Ui.Hint.Value += "\n‚ö†Ô∏è –í—ã —É—Å—Ç–∞–ª–∏! –°—Ö–æ–¥–∏—Ç–µ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª!";
        }
        
        if (playerData.hunger > 80) {
            player.Ui.Hint.Value += "\n‚ö†Ô∏è –í—ã –≥–æ–ª–æ–¥–Ω—ã! –°—Ö–æ–¥–∏—Ç–µ –≤ —Å—Ç–æ–ª–æ–≤—É—é!";
        }
        
        // –ù–∞–∫–∞–∑–∞–Ω–∏—è
        if (schoolMode.punishments[player.id]) {
            schoolMode.punishments[player.id]--;
            if (schoolMode.punishments[player.id] <= 0) {
                delete schoolMode.punishments[player.id];
                player.Spawns.Spawn();
                player.Ui.Hint.Value = "–ù–∞–∫–∞–∑–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é";
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤
function updateQuests() {
    if (schoolMode.state !== GameStates.CLUE_COLLECTION) return;
    
    const quest = schoolMode.quests.allQuests[schoolMode.quests.currentQuest];
    if (!quest || quest.completed) return;
    
    Players.All.forEach(player => {
        if (player.IsBot) return;
        
        if (isPlayerInZone(player, quest.target)) {
            quest.completed = true;
            schoolMode.playerData[player.id].scores += quest.reward;
            player.Properties.Scores.Value = schoolMode.playerData[player.id].scores;
            player.Ui.Hint.Value = `‚úÖ –ö–≤–µ—Å—Ç "${quest.title}" –∑–∞–≤–µ—Ä—à–µ–Ω! +${quest.reward} –æ—á–∫–æ–≤`;
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª–∏–∫–∏
            const clue = `–£–ª–∏–∫–∞ –æ—Ç –∫–≤–µ—Å—Ç–∞ "${quest.title}"`;
            schoolMode.playerData[player.id].inventory.push(clue);
            schoolMode.quests.clues.push(clue);
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–≤–µ—Å—Ç—É
            schoolMode.quests.currentQuest++;
            if (schoolMode.quests.currentQuest >= schoolMode.quests.allQuests.length) {
                setGameState(GameStates.PUZZLE_SOLVING);
            } else {
                announceNewQuest();
            }
        }
    });
}

// –ó–æ–Ω—ã —à–∫–æ–ª—ã
function setupSchoolZones() {
    // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ (–∫–≤–µ—Å—Ç—ã)
    const libTrigger = AreaPlayerTriggerService.Get("library");
    libTrigger.Tags = ["library"];
    libTrigger.Enable = true;
    libTrigger.OnEnter.Add(function(player){
        const p = Players.Get(player.Id);
        if (!p || p.IsBot) return;
        
        if (schoolMode.state === GameStates.CLUE_COLLECTION) {
            p.Ui.Hint.Value = "–ò—â–∏—Ç–µ —É–ª–∏–∫–∏ –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ (/talk)";
        }
    });
    
    // –ü–æ–¥–≤–∞–ª (—Ñ–∏–Ω–∞–ª)
    const detentionTrigger = AreaPlayerTriggerService.Get("detention");
    detentionTrigger.Tags = ["detention"];
    detentionTrigger.Enable = true;
    detentionTrigger.OnEnter.Add(function(player){
        const p = Players.Get(player.Id);
        if (!p || p.IsBot) return;
        
        if (schoolMode.state === GameStates.FINAL_CONFRONTATION) {
            p.Ui.Hint.Value = "üíÄ –ü—Ä–∏–∑—Ä–∞–∫ –∑–¥–µ—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /answer —á—Ç–æ–±—ã —Ä–∞–∑–≥–∞–¥–∞—Ç—å –µ–≥–æ —Ç–∞–π–Ω—É!";
        }
    });
    
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω
    const viewClass = AreaViewService.GetContext().Get("classroom");
    viewClass.Color = new Color(1, 1, 1, 0.3);
    viewClass.Tags = ["classroom"];
    viewClass.Enable = true;
    
    const viewGym = AreaViewService.GetContext().Get("gym");
    viewGym.Color = new Color(1, 0, 0, 0.3);
    viewGym.Tags = ["gym"];
    viewGym.Enable = true;
    
    const viewCafe = AreaViewService.GetContext().Get("cafeteria");
    viewCafe.Color = new Color(0, 1, 0, 0.3);
    viewCafe.Tags = ["cafeteria"];
    viewCafe.Enable = true;
    
    const viewLib = AreaViewService.GetContext().Get("library");
    viewLib.Color = new Color(0, 0, 1, 0.3);
    viewLib.Tags = ["library"];
    viewLib.Enable = true;
    
    const viewYard = AreaViewService.GetContext().Get("yard");
    viewYard.Color = new Color(1, 1, 0, 0.3);
    viewYard.Tags = ["yard"];
    viewYard.Enable = true;
    
    const viewDetention = AreaViewService.GetContext().Get("detention");
    viewDetention.Color = new Color(0.3, 0.3, 0.3, 0.5);
    viewDetention.Tags = ["detention"];
    viewDetention.Enable = true;
    
    const viewAuditorium = AreaViewService.GetContext().Get("auditorium");
    viewAuditorium.Color = new Color(1, 0, 1, 0.3);
    viewAuditorium.Tags = ["auditorium"];
    viewAuditorium.Enable = true;
    
    const viewPlayground = AreaViewService.GetContext().Get("playground");
    viewPlayground.Color = new Color(0, 1, 1, 0.3);
    viewPlayground.Tags = ["playground"];
    viewPlayground.Enable = true;
}

// –ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞
function initChatCommands() {
    Chat.OnMessage.Add(function(m) {
        const msg = m.Text.trim();
        const sender = Players.GetByRoomId(m.Sender);
        if (!sender || sender.IsBot) return;

        const args = msg.split(' ');
        const command = args[0].toLowerCase();

        if (command === '/help') {
            let helpText = `üìö –ö–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
/answer [–æ—Ç–≤–µ—Ç] - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–≥–∞–¥–∫—É
/talk [–∏–º—è NPC] - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
/clues - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏
/scores - –º–æ–∏ –æ—á–∫–∏
/energy - –º–æ—è —ç–Ω–µ—Ä–≥–∏—è
/hunger - –º–æ–π –≥–æ–ª–æ–¥
/quest - —Ç–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç
/where - –≥–¥–µ —è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å?`;

            if (schoolMode.roles[sender.id] === Characters.DIRECTOR) {
                helpText += `
/detention [id] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞—Ä—Ü–µ—Ä
/announce [—Ç–µ–∫—Å—Ç] - –æ–±—ä—è–≤–∏—Ç—å –≤—Å–µ–º`;
            }

            sender.Ui.Hint.Value = helpText;
        }
        
        else if (command === '/answer') {
            if (args.length < 2) {
                sender.Ui.Hint.Value = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /answer [–≤–∞—à –æ—Ç–≤–µ—Ç]";
                return;
            }
            
            const answer = args.slice(1).join(' ');
            if (schoolMode.state === GameStates.PUZZLE_SOLVING || 
                schoolMode.state === GameStates.FINAL_CONFRONTATION) {
                checkAnswer(sender, answer);
            } else {
                sender.Ui.Hint.Value = "–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–≥–∞–¥–∫–∏!";
            }
        }
        
        else if (command === '/talk') {
            if (args.length < 2) {
                sender.Ui.Hint.Value = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /talk [–∏–º—è NPC]";
                return;
            }

            const npcName = args.slice(1).join(' ');
            const npc = Players.All.find(p => p.NickName === npcName && p.IsBot);
            
            if (!npc) {
                sender.Ui.Hint.Value = "–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!";
                return;
            }

            const npcRole = schoolMode.roles[npc.id];
            const distance = sender.Position.sub(npc.Position).length;
            
            if (distance > 5) {
                sender.Ui.Hint.Value = "–ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É!";
                return;
            }

            let response = "";
            switch(npcRole) {
                case Characters.OLD_TEACHER:
                    response = "–ê—Ö, –ø—Ä–∏–∑—Ä–∞–∫... –û–Ω –±—ã–ª —É—á–µ–Ω–∏–∫–æ–º 50 –ª–µ—Ç –Ω–∞–∑–∞–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.";
                    addClueToPlayer(sender, "–ü—Ä–∏–∑—Ä–∞–∫ - –±—ã–≤—à–∏–π —É—á–µ–Ω–∏–∫");
                    break;
                case Characters.LIBRARIAN:
                    response = "–£—á–µ–±–Ω–∏–∫–∏ –ø—Ä–æ–ø–∞–¥–∞—é—Ç –∫–∞–∂–¥—É—é –Ω–æ—á—å! –í—á–µ—Ä–∞ —è –≤–∏–¥–µ–ª, –∫–∞–∫ –æ–¥–∏–Ω —Å–∞–º –ø–æ —Å–µ–±–µ –ª–µ—Ç–µ–ª –≤ –ø–æ–¥–≤–∞–ª!";
                    addClueToPlayer(sender, "–ü—Ä–∏–∑—Ä–∞–∫ –≤–æ—Ä—É–µ—Ç —É—á–µ–±–Ω–∏–∫–∏ –Ω–æ—á—å—é");
                    break;
                case Characters.JANITOR:
                    response = "–í –ø–æ–¥–≤–∞–ª–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏ –ø–æ –Ω–æ—á–∞–º... –Ø —Ç—É–¥–∞ –Ω–µ —Ö–æ–∂—É –ø–æ—Å–ª–µ –∑–∞–∫–∞—Ç–∞.";
                    addClueToPlayer(sender, "–ü–æ–¥–≤–∞–ª - –ª–æ–≥–æ–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–∞");
                    break;
                case Characters.DETECTIVE:
                    response = "–Ø —Ä–∞—Å—Å–ª–µ–¥—É—é —ç—Ç–æ –¥–µ–ª–æ. –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–µ–æ—Ä–∏—è - –ø—Ä–∏–∑—Ä–∞–∫ –∏—â–µ—Ç —Å–≤–æ—é —Å—Ç–∞—Ä—É—é —Ç–µ—Ç—Ä–∞–¥—å —Å –æ—Ü–µ–Ω–∫–∞–º–∏.";
                    addClueToPlayer(sender, "–ü—Ä–∏–∑—Ä–∞–∫ –∏—â–µ—Ç —Å–≤–æ—é —Ç–µ—Ç—Ä–∞–¥—å");
                    break;
                default:
                    response = "–ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?";
            }

            sender.Ui.Hint.Value = `${npc.NickName}: "${response}"`;
        }
        
        else if (command === '/clues') {
            const playerData = schoolMode.playerData[sender.id];
            if (!playerData) return;
            
            if (playerData.inventory.length > 0) {
                sender.Ui.Hint.Value = "üîç –í–∞—à–∏ —É–ª–∏–∫–∏:\n" + playerData.inventory.join("\n- ");
            } else {
                sender.Ui.Hint.Value = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ª–∏–∫! –ò—â–∏—Ç–µ –∏—Ö –ø–æ —à–∫–æ–ª–µ.";
            }
        }
        
        else if (command === '/scores') {
            const playerData = schoolMode.playerData[sender.id];
            sender.Ui.Hint.Value = `üèÜ –í–∞—à–∏ –æ—á–∫–∏: ${playerData ? playerData.scores : 0}`;
        }
        
        else if (command === '/energy') {
            const playerData = schoolMode.playerData[sender.id];
            sender.Ui.Hint.Value = `‚ö° –í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è: ${playerData ? Math.round(playerData.energy) : 0}%`;
        }
        
        else if (command === '/hunger') {
            const playerData = schoolMode.playerData[sender.id];
            sender.Ui.Hint.Value = `üçé –í–∞—à –≥–æ–ª–æ–¥: ${playerData ? Math.round(playerData.hunger) : 0}%`;
        }
        
        else if (command === '/quest') {
            const quest = schoolMode.quests.allQuests[schoolMode.quests.currentQuest];
            if (quest && !quest.completed) {
                sender.Ui.Hint.Value = `üìå –¢–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç: ${quest.title}\n${quest.description}`;
            } else {
                sender.Ui.Hint.Value = "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞.";
            }
        }
        
        else if (command === '/where') {
            switch(schoolMode.state) {
                case GameStates.CLUE_COLLECTION:
                    const quest = schoolMode.quests.allQuests[schoolMode.quests.currentQuest];
                    sender.Ui.Hint.Value = quest ? 
                        `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–æ–Ω–µ "${quest.target}" –¥–ª—è –∫–≤–µ—Å—Ç–∞ "${quest.title}"` :
                        "–ò—â–∏—Ç–µ —É–ª–∏–∫–∏ –ø–æ –≤—Å–µ–π —à–∫–æ–ª–µ!";
                    break;
                case GameStates.PUZZLE_SOLVING:
                    sender.Ui.Hint.Value = "–†–µ—à–∞–π—Ç–µ –∑–∞–≥–∞–¥–∫–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏ –∞–∫—Ç–æ–≤—ã–π –∑–∞–ª.";
                    break;
                case GameStates.FINAL_CONFRONTATION:
                    sender.Ui.Hint.Value = "–ü—Ä–∏–∑—Ä–∞–∫ –≤ –ø–æ–¥–≤–∞–ª–µ! –°—Ä–æ—á–Ω–æ —Ç—É–¥–∞!";
                    break;
                default:
                    sender.Ui.Hint.Value = "–°–ª–µ–¥—É–π—Ç–µ –æ–±—â–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º!";
            }
        }
        
        else if (command === '/detention') {
            if (schoolMode.roles[sender.id] !== Characters.DIRECTOR) {
                sender.Ui.Hint.Value = "‚ùå –¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∫–∞–∑—ã–≤–∞—Ç—å!";
                return;
            }
            
            if (args.length < 2) {
                sender.Ui.Hint.Value = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /detention [id –∏–≥—Ä–æ–∫–∞]";
                return;
            }
            
            const target = Players.GetByRoomId(Number(args[1]));
            if (!target) {
                sender.Ui.Hint.Value = "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!";
                return;
            }
            
            punishPlayer(target, "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª", 120);
            sender.Ui.Hint.Value = `‚õî ${target.NickName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞—Ä—Ü–µ—Ä!`;
        }
        
        else if (command === '/announce') {
            if (schoolMode.roles[sender.id] !== Characters.DIRECTOR) {
                sender.Ui.Hint.Value = "‚ùå –¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è!";
                return;
            }
            
            if (args.length < 2) {
                sender.Ui.Hint.Value = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce [—Ç–µ–∫—Å—Ç]";
                return;
            }
            
            const announcement = args.slice(1).join(' ');
            room.Ui.Hint.Value = `üì¢ –î–∏—Ä–µ–∫—Ç–æ—Ä –æ–±—ä—è–≤–ª—è–µ—Ç: ${announcement}`;
        }
        
        else if (command === '/class') {
            if (args.length < 2) {
                sender.Ui.Hint.Value = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: 5–ê, 6–ë, 7–í";
                sender.Ui.Hint.Value += "\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /class [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞]";
                return;
            }
            
            const className = args[1];
            let targetTeam = null;
            
            if (className === "5–ê") targetTeam = Class5A;
            else if (className === "6–ë") targetTeam = Class6B;
            else if (className === "7–í") targetTeam = Class7V;
            
            if (!targetTeam) {
                sender.Ui.Hint.Value = "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª–∞—Å—Å! –í–∞—Ä–∏–∞–Ω—Ç—ã: 5–ê, 6–ë, 7–í";
                return;
            }
            
            targetTeam.Add(sender);
            schoolMode.playerData[sender.id].class = className;
            sender.Ui.Hint.Value = `‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ ${className} –∫–ª–∞—Å—Å!`;
            initPlayerData(sender);
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª–∏–∫–∏ –∏–≥—Ä–æ–∫—É
function addClueToPlayer(player, clue) {
    if (!schoolMode.playerData[player.id].inventory.includes(clue)) {
        schoolMode.playerData[player.id].inventory.push(clue);
        schoolMode.quests.clues.push(clue);
        player.Ui.Hint.Value = `üîç –í—ã –ø–æ–ª—É—á–∏–ª–∏ —É–ª–∏–∫—É: "${clue}"`;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
function setupLeaderboard() {
    LeaderBoard.PlayerLeaderBoardValues = [
        new DisplayValueHeader('Role', '–†–æ–ª—å', '–†–æ–ª—å'),
        new DisplayValueHeader('Scores', '–û—á–∫–∏', '–û—á–∫–∏'),
        new DisplayValueHeader('Clues', '–£–ª–∏–∫–∏', '–£–ª–∏–∫–∏')
    ];

    LeaderBoard.PlayersWeightGetter.Set(function(p) {
        return p.Properties.Get('Scores').Value;
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const statTimer = Timers.GetContext().Get("Stats");
    statTimer.OnTimer.Add(function() {
        updatePlayerStats();
        updateQuests();
        statTimer.RestartLoop(5);
    });
    statTimer.RestartLoop(5);
    
    Players.OnPlayerConnected.Add(function(player) {
        if (player.IsBot) return;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        if (Props.Get(`Banned_${player.id}`).Value) {
            player.SetPositionAndRotation(
                schoolMode.schoolZones.detention.center,
                player.Rotation
            );
            player.Ui.Hint.Value = "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!";
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        player.Properties.Get('Scores').Value = 0;
        player.Properties.Get('Role').Value = "–ù–æ–≤–∏—á–æ–∫";
        player.Ui.Hint.Value = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—É! –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å: /class [5–ê|6–ë|7–í]';
        
        // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤
        if (Players.All.filter(p => !p.IsBot).length >= 1 && schoolMode.state === GameStates.WAITING) {
            setGameState(GameStates.INTRODUCTION);
            setupBots();
            assignRoles();
        }
    });
    
    Damage.OnKill.Add(function(killer, victim) {
        // –ù–∞–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ —É–±–∏–π—Å—Ç–≤–∞
        if (killer && !killer.IsBot) {
            punishPlayer(killer, "–Ω–∞—Å–∏–ª–∏–µ –≤ —à–∫–æ–ª–µ");
        }
    });
    
    Damage.OnDeath.Add(function(player, info) {
        if (player.IsBot) return;
        
        const playerData = schoolMode.playerData[player.id];
        if (playerData) {
            playerData.scores -= 15;
            player.Properties.Scores.Value = playerData.scores;
        }
        
        if (GameMode.Parameters.GetBool('AutoSpawn')) {
            player.Spawns.Spawn();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (—Å—é–∂–µ—Ç–∞)
    mainTimer.OnTimer.Add(function() {
        switch(schoolMode.state) {
            case GameStates.WAITING:
                if (Players.All.filter(p => !p.IsBot).length >= 1) {
                    setGameState(GameStates.INTRODUCTION);
                    setupBots();
                    assignRoles();
                }
                break;
                
            case GameStates.INTRODUCTION:
                setGameState(GameStates.GHOST_APPEARANCE);
                break;
                
            case GameStates.GHOST_APPEARANCE:
                setGameState(GameStates.CLUE_COLLECTION);
                break;
                
            case GameStates.CLUE_COLLECTION:
                // –ï—Å–ª–∏ –≤—Å–µ –∫–≤–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥–∞–¥–∫–∞–º
                if (schoolMode.quests.currentQuest >= schoolMode.quests.allQuests.length) {
                    setGameState(GameStates.PUZZLE_SOLVING);
                }
                break;
                
            case GameStates.PUZZLE_SOLVING:
                setGameState(GameStates.FINAL_CONFRONTATION);
                break;
                
            case GameStates.FINAL_CONFRONTATION:
                setGameState(GameStates.EPILOGUE);
                break;
                
            case GameStates.EPILOGUE:
                Game.RestartGame();
                break;
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    Players.OnPlayerDisconnected.Add(function(player) {
        if (player.IsBot) return;
        
        if (schoolMode.playerData[player.id]) {
            Props.Get(`Player_${player.id}_Scores`).Value = schoolMode.playerData[player.id].scores;
            Props.Get(`Player_${player.id}_Energy`).Value = schoolMode.playerData[player.id].energy;
            Props.Get(`Player_${player.id}_Hunger`).Value = schoolMode.playerData[player.id].hunger;
            Props.Get(`Player_${player.id}_Class`).Value = schoolMode.playerData[player.id].class || "";
            Props.Get(`Player_${player.id}_Role`).Value = schoolMode.roles[player.id] || Characters.STUDENT;
        }
    });
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ
function restorePlayerData(player) {
    const scores = Props.Get(`Player_${player.id}_Scores`).Value;
    const energy = Props.Get(`Player_${player.id}_Energy`).Value;
    const hunger = Props.Get(`Player_${player.id}_Hunger`).Value;
    const playerClass = Props.Get(`Player_${player.id}_Class`).Value;
    const role = Props.Get(`Player_${player.id}_Role`).Value;
    
    schoolMode.playerData[player.id] = {
        scores: scores || 0,
        energy: energy || 100,
        hunger: hunger || 0,
        inventory: [],
        class: playerClass || null
    };
    
    schoolMode.roles[player.id] = role;
    
    if (playerClass) {
        if (playerClass === "5–ê") Class5A.Add(player);
        else if (playerClass === "6–ë") Class6B.Add(player);
        else if (playerClass === "7–í") Class7V.Add(player);
    }
    
    player.Properties.Get('Role').Value = role;
    player.Properties.Scores.Value = schoolMode.playerData[player.id].scores;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGameMode() {
    Dmg.DamageOut.Value = false;
    Dmg.FriendlyFire.Value = false;
    BreackGraph.OnlyPlayerBlocksDmg = true;
    
    initServerProperties();
    initServerTimer();
    setupLeaderboard();
    setupSchoolZones();
    initChatCommands();
    setupEventHandlers();
    
    setGameState(GameStates.WAITING);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initGameMode();